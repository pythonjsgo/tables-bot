import db from '../../db-manager.js'
import { giftBuilder } from '../../keyboards.js'
import * as randomstring from 'randomstring'
import { g3PlusMasterSearcher, getTodayDate, tableUpperSearcher } from '../../logic.js'
import { TABLES } from '../../../config.js'

export const middleware = async (ctx: any) => {
    const userID = <number>ctx.from.id
    const tableTitle = ctx.callbackQuery.data.split('|')[1].trim()
    // tableTitle = tableTitle.slice(0, tableTitle.indexOf('/') + 1)
    console.log('tableTitle', tableTitle)
    const userData = await db.users.findOne({ userID })
    if (userData?.tables?.[tableTitle]) {
        await ctx.answerCallbackQuery(
            // @ts-ignore
            { text: `–£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç ${TABLES[tableTitle].title} —Å—Ç–æ–ª!` }
        )
        return null
    }

    // checking and if is good, do this
    if (tableTitle === 'bronze') {
        const MASTER_GIFT = 5000
        const REFERRAL_GIFT = 1000
        if (!userData?.referrerID) return ctx.reply('–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ')
        const upper = await tableUpperSearcher(userData.referrerID)
        const referrerData = await db.users.findOne({ userID: userData.referrerID })

        // if (upper.tables[tableTitle].downers.length >= 2) {
        //     db.users.updateOne({ userID: upper.userID }, {
        //         $set: {
        //             ['tables.']
        //         }
        //     })
        // }
        db.users.updateOne({ userID: upper.userID }, {
            $addToSet: {
                [`tables.${tableTitle}.downers`]: userID
            }
        }, {
            upsert: true
        })
        // ctx.reply(referrerData)
        // ctx.reply(JSON.stringify(referrerData, null, 2))
        db.users.updateOne({ userID: referrerData?.userID }, { $addToSet: { referrals: userID } }, { upsert: true })
        const table: any = {}
        table.id = randomstring.generate(5)
        table.status = 'created'
        // @ts-ignore
        table.title = TABLES[tableTitle].title
        table.owner = userID
        table.master = upper.referrerID
        table.referrer = userData.referrerID
        table.gifts = []
        table.techTitle = tableTitle
        table.upper = upper.userID
        table.creationDate = getTodayDate()
        table.joinDate = Date.now()
        table.super = parseInt(userData?.superReferrerID)

        const upperTableData = await db.tables.findOne({
            $and: [
                { owner: upper.userID },
                { techTitle: tableTitle }
            ]
        })
        // ctx.reply(JSON.stringify(upperTableData, null, 2))
        const masterID = upperTableData.upper
        const masterData: any = await db.users.findOne({ userID: masterID })
        const upperRelativesData = upper.tables?.bronze?.relatives || {}
        for (const key of Object.keys(upperRelativesData)) {
            upperRelativesData[key] = upperRelativesData[key] + 1
        }
        console.log(table.id, 'fdlkdfjfdlfdjlklfkd')
        const superReferrerData = await db.users.findOne({ userID: userData?.superReferrerID })
        ctx.editMessageCaption({
            caption: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞
ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π —Å—Ç–æ–ª (${getTodayDate()})
ID —Å—Ç–æ–ª–∞: ${table.id}

üßëüèº–í—ã –¥–∞—Ä–∏—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–π
üéÅ –ø–æ–¥–∞—Ä–æ–∫ ${MASTER_GIFT}‚ÇΩ ¬´–ú–∞—Å—Ç–µ—Ä—É¬ª –∏ ${REFERRAL_GIFT}‚ÇΩ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä¬ª

‚úÖ–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è, ¬´–ú–∞—Å—Ç–µ—Ä¬ª –∏ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä¬ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ, —Ç–µ–º —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –í–∞—Å –∫–∞–∫ ¬´–ú–∞—Å—Ç–µ—Ä¬ª –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞

üßë‚Äçüíº–°–≤—è–∑–∞—Ç—å—Å—è —Å ¬´–ú–∞—Å—Ç–µ—Ä–æ–º¬ª –∏ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä¬ª –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Ç –¢–µ–ª–µ–≥—Ä–∞–º, —É–∑–Ω–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–º–∞–π–ª–∏–∫ —Ä—É–∫–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞: (<code>–ü—Ä–∏–≤–µ—Ç üëã, –•–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ  –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫üéÅ</code>)

üì¢–û–ø–æ–≤–µ—Å—Ç–∏—Ç–µ ¬´–ú–∞—Å—Ç–µ—Ä–∞¬ª –∏ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä–∞¬ª –µ—Å–ª–∏ —É –í–∞—Å –±–ª–æ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π)

<b>–ú–∞—Å—Ç–µ—Ä: </b> @${masterData?.username} –ø–æ–¥–∞—Ä–æ–∫ - ${MASTER_GIFT}
<b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: </b> @${superReferrerData?.username || referrerData?.username} –ø–æ–¥–∞—Ä–æ–∫ - ${REFERRAL_GIFT}‚ÇΩ
`,
            reply_markup: giftBuilder([{
                name: masterData?.username,
                amount: MASTER_GIFT
            }, {
                name: superReferrerData?.username || referrerData?.username,
                amount: REFERRAL_GIFT
            }], table.id, [], []),
            parse_mode: 'HTML'
        })
        ctx.api.sendMessage(upper.userID, `<b>–ù–∞ –≤–∞—à ${table.title}</b> –∑–∞—à—ë–ª –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä ${ctx.from.first_name} @${ctx.from.username}`, { parse_mode: 'HTML' })
        ctx.api.sendMessage(masterData.userID, `<b>–ù–∞ –≤–∞—à ${table.title}</b> –∑–∞—à—ë–ª –Ω–æ–≤—ã–π –¥–∞—Ä–∏—Ç–µ–ª—å ${ctx.from.first_name} @${ctx.from.username}`, { parse_mode: 'HTML' })
        console.log('masterData', masterData, 'referrerData', referrerData)
        table.gifts.push(
            {
                amount: REFERRAL_GIFT,
                from: userID,
                to: superReferrerData?.userID || referrerData?.userID
            }, {
                amount: MASTER_GIFT,
                from: userID,
                to: masterData.userID
            })
        db.tables.insertOne(table)
        db.users.updateOne({ userID }, {
            $set: {
                'tables.bronze': {
                    status: 'created',
                    relatives: Object.assign(
                        { ...upperRelativesData }
                        , { [userID]: 0 }),
                    id: table.id,
                    title: table.title
                }
            }
        })
        setTimeout(async () => {
            // if not done us  erban
            const tableData = await db.tables.findOne({ id: table.id })
            if (!tableData?.gifts?.filter((i: { status: string }) => i.status === 'confirmed')?.length && tableData.status === 'created') {
                await db.users.updateOne({ userID }, {
                    $unset: { [`tables.${tableData.techTitle}`]: '' }
                })
                await db.users.updateOne({
                    userID: tableData.upper
                }, {
                    $pull: {
                        [`tables.${tableData.techTitle}.downers`]: userID
                    }
                })
                ctx.reply('–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã —Å–æ —Å—Ç–æ–ª–∞!', { parse_mode: 'HTML' })
            }
        }, 1000 * 60 * 60 * 24) // 24h
    } else {
        // @ts-ignore
        const tableMeta = TABLES[tableTitle]
        const MASTER_GIFT = tableMeta.masterGift
        const REFERRAL_GIFT = tableMeta.referrerGift
        let referrerData = await db.users.findOne({ userID: userData.referrerID })
        let superReferrerData = await db.users.findOne({ userID: userData?.superReferrerID })
        if (tableTitle === 'start') {
            referrerData = null
            superReferrerData = null
        }
        let alphaPriority = 0
        if (!referrerData?.tables?.[tableTitle] && tableTitle !== 'start') {
            alphaPriority = userData.fraction
            ctx.api.sendMessage(userData?.referrerID, `
<b>‚ö†Ô∏è–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ${REFERRAL_GIFT} –æ—Ç ${userData?.username}</b>

–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç–∫—Ä–æ–π—Ç–µ ${tableMeta.title}`)
            referrerData = null
        }

        const masterID = (await g3PlusMasterSearcher(alphaPriority || userData.referrerID, tableTitle)).userID
        const masterData = (await db.users.findOneAndUpdate(
            { userID: masterID },
            {
                $addToSet: {
                    [`tables.${tableTitle}.downers`]: userID
                }
            },
            {
                returnDocument: 'after',
                upsert: true
            }
        )).value
        try {
            if (masterData?.tables[tableTitle]?.downers?.length >= 3) {
                db.users.updateOne(
                    { userID: masterID },
                    {
                        $set: {
                            [`tables.${tableTitle}.status`]: 'done'
                        },
                        $inc: {
                            tableLevel: 1
                        }
                    }
                )
                db.tables.updateOne(
                    { id: masterData.tables[tableTitle].id },
                    {
                        $set: {
                            status: 'done'
                        }
                    }
                )
            }
        } catch (e) {
            console.error(e)
        }

        const creationDate = getTodayDate()
        const table: any = {
            id: randomstring.generate(5),
            status: 'created',
            techTitle: tableTitle,
            // @ts-ignore
            title: TABLES[tableTitle].title,
            owner: userID,
            master: masterData?.userID,
            referrer: userData?.referrerID,
            gifts: [],
            creationDate,
            joinDate: Date.now()
        }
        table.gifts.push({
            amount: MASTER_GIFT,
            from: userID,
            to: masterData.userID
        })

        if (tableTitle !== 'start') {
            if (superReferrerData?.userID || referrerData?.userID) {
                table.gifts.push(
                    {
                        amount: REFERRAL_GIFT,
                        from: userID,
                        to: superReferrerData?.userID || referrerData?.userID
                    }
                )
            }
        }
        table.super = parseInt(userData?.superReferrerID)
        ctx.api.sendMessage(masterData.userID, `<b>–ù–∞ –≤–∞—à ${table.title}</b> –∑–∞—à—ë–ª –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä ${ctx.from.first_name} @${ctx.from.username}`, { parse_mode: 'HTML' })

        let optionalLine = '<b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: </b>‚ùå'
        if (superReferrerData?.userID || referrerData?.userID) {
            optionalLine = `<b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: </b> @${superReferrerData?.username || referrerData?.username} –ø–æ–¥–∞—Ä–æ–∫ - ${REFERRAL_GIFT}‚ÇΩ`
        }
        ctx.editMessageCaption({
            caption: `
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞
${tableMeta.title} (${getTodayDate()})
ID —Å—Ç–æ–ª–∞: ${table.id}

üßëüèº–í—ã –¥–∞—Ä–∏—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–π
üéÅ –ø–æ–¥–∞—Ä–æ–∫ ${MASTER_GIFT}‚ÇΩ ¬´–ú–∞—Å—Ç–µ—Ä—É¬ª –∏ ${REFERRAL_GIFT}‚ÇΩ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä¬ª

‚úÖ–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è, ¬´–ú–∞—Å—Ç–µ—Ä¬ª –∏ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä¬ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ, —Ç–µ–º —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –í–∞—Å –∫–∞–∫ ¬´–ú–∞—Å—Ç–µ—Ä¬ª –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∞

üßë‚Äçüíº–°–≤—è–∑–∞—Ç—å—Å—è —Å ¬´–ú–∞—Å—Ç–µ—Ä–æ–º¬ª –∏ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä¬ª –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Ç –¢–µ–ª–µ–≥—Ä–∞–º, —É–∑–Ω–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–º–∞–π–ª–∏–∫ —Ä—É–∫–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞: (–ü—Ä–∏–≤–µ—Ç üëã, –•–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ  –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ 5.000‚ÇΩüéÅ)

üì¢–û–ø–æ–≤–µ—Å—Ç–∏—Ç–µ ¬´–ú–∞—Å—Ç–µ—Ä–∞¬ª –∏ ¬´–ê–ø–ª–∞–π–Ω–µ—Ä–∞¬ª –µ—Å–ª–∏ —É –í–∞—Å –±–ª–æ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π)

–ú–∞—Å—Ç–µ—Ä: @${masterData.username} –ø–æ–¥–∞—Ä–æ–∫ - ${MASTER_GIFT}
` + optionalLine,
            reply_markup: giftBuilder([{
                name: masterData?.username,
                amount: MASTER_GIFT
            }, {
                name: referrerData?.username,
                amount: REFERRAL_GIFT
            }], table.id,
            [],
            []),
            parse_mode: 'HTML'
        })

        db.tables.insertOne(table)
        const upperRelativesData = masterData.tables?.bronze?.relatives || {}
        for (const key of Object.keys(upperRelativesData)) {
            upperRelativesData[key] = upperRelativesData[key] + 1
        }
        db.users.updateOne({ userID }, {
            $set: {
                [`tables.${tableTitle}`]: {
                    status: 'created',
                    id: table.id,
                    alphaLevel: (masterData?.tables?.[tableTitle]?.alphaLevel | 0) + 1, // some shit sulution
                    relatives: Object.assign(
                        { ...upperRelativesData }
                        , { [userID]: 0 })
                }
            }
        })
        setTimeout(async () => {
            // if not done us  erban
            const tableData = await db.tables.findOne({ id: table.id })
            if (!tableData?.gifts?.filter((i: { status: string }) => i.status === 'confirmed')?.length && tableData.status === 'created') {
                await db.users.updateOne({ userID }, {
                    $unset: { [`tables.${tableData.techTitle}`]: '' }
                })
                await db.users.updateOne({
                    userID: tableData.upper
                }, {
                    $pull: {
                        [`tables.${tableData.techTitle}.downers`]: userID
                    }
                })
                ctx.reply('–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã —Å–æ —Å—Ç–æ–ª–∞!', { parse_mode: 'HTML' })
            }
        }, 1000 * 60 * 60 * 24) // 24h
    }
}
